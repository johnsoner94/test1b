Obstacles That I Recognized I Needed to Face• You need to figure out what is needed with your controllers. (i.e. root controller?)• You think you’ll be able to overlay the cards face over the Muhlenberg back. Try to determine if this is true.• You need to figure out if you can use the already existing match method to control the turn over method.? Also if you can use the match method to determine the score.• Make sure that you connect whatever your score method is to update the score everytime there is a change.• Determine what you need to do to initialize everything.• How to determine where the cards are initially assigned, and also what random cards are going to be called.• The way that the cards match matter and should be be considered.• You need to flip the card over after it is selected. The score can’t be in the flip method.• Each button has an assigned index and each card is randomly assigned a index.• You need to figure out how to use SuperCard to create what you want your card to look like, and then use the view controller and CardMatchingGame.Solutions and Plans of Execution• A solution to the flip over problem is to make the card faces the background and then when there is a match just remove the image and change the card color (or however you are going to denote you can no longer selected it).• When it makes a match the card become immediately disabled. It becomes shaded in and an action related to it becomes disabled.• The cards placement can be assigned when the app is first run. When the game starts the CardMatchingGame could call for 16 random cards place those cards into an array. When the button then clicks it has a number and then that would correlate to a card object in the array at that index. The picture of the card could then be generated using the PlayingCardView and the CardMatchingGameViewController could mediate that the card that is being create would be placed on the button. (Sort of like a visible, then not visible button). Those cards that were called by the getCardUsingIndex would be set equal to temporary cards.• In CardMatchingGame there should be two temporary cards. A safeguard could be put into place here to make sure that the two cards are compared before another card can be selected.• The score should only be subtracted from when the card is flipped and the boolean faceUp is true.• In a method in CardMatchingGame there should be something that checks to see if the two cards that are being compared are the same. The first should check to see if the suit of the two cards are the same. If they are it should add four points to the score and then disable the button and change the view of the card (by shading it or something). If they didn’t match in suit then it should compare rank, if those are the same then the score should be added to by 16 and the button to flip that card over should be disabled. If there is no match at all 2 points should be deducted and then the two cards should be flipped over.• 